%%% ================================ %%
%Question 1


filedata1=readmatrix("Tetuan City power consumption.csv")
filedata1(:,1)=[] %%remove the date column
filedata1

% reading csv file to a table
filedata2=readtable("Tetuan City power consumption.csv")
filedata2(:,1)=[]
filedata2

%Eucladian Distance

[rownum, ncolnum]=size(filedata1);
rownum

euc=[]
for n = 1 : rownum        % eucalidan distance loop with each rows
    if (n~=5)             %except with it self (row 5)
        a=norm(filedata2{5,2:8}-filedata2{n,2:8})

    end
    euc(n)=a
end
m=min(euc) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(euc)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.


%Manhattan Distance
man=[]
for n = 1:rownum

    if (n~=5)
       b= sqrt((filedata2{5,2}-filedata2{n,2})^2 + (filedata2{5,3}-filedata2{n,3})^2+ (filedata2{5,4}-filedata2{n,4})^2 + (filedata2{5,5}-filedata2{n,5})^2+ (filedata2{5,6}-filedata2{n,6})^2 + (filedata2{5,6}-filedata2{n,6})^2 + (filedata2{5,7}-filedata2{n,7})^2 + (filedata2{5,7}-filedata2{n,7})^2)

    end
    man(n)=b
end

m=min(man) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(man)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.

%Cosine Distance

cos=[]
for n = 1:rownum
    if (n~=5)
        Dist_o_1 = 1-(dot(filedata2{5,2},filedata2{n,2})/(filedata2{5,2}*filedata2{n,2}))
    end
    cos(n)=Dist_o_1
end    

m=min(cos) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(cos)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.

%Dist_o_2=1-(dot(Fo,Fo2 )/(norm(Fo)*norm(Fo2)))



%%% ================================ %%
%Question 2                                  

% reading csv file to a table
filedata3=readmatrix("Tetuan City power consumption.csv")
filedata3(:,1)=[]
filedata3
N=normc(filedata3)


%Eucladian Distance

[rownum, ncolnum]=size(N);
rownum

euc=[]
for n = 1 : rownum        % eucalidan distance loop with each rows
    if (n~=5)             %except with it self (row 5)
        a=norm(N{5,2:8}-N{n,2:8})

    end
    euc(n)=a
end
min(euc) %find the nearest neighbour
m=min(euc) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(euc)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.

%Manhattan Distance
man=[]
for n = 1:rownum

    if (n~=5)
       b= sqrt((N{5,2}-N{n,2})^2 + (N{5,3}-N{n,3})^2+ (N{5,4}-N{n,4})^2 + (N{5,5}-N{n,5})^2+ (N{5,6}-N{n,6})^2 + (N{5,6}-N{n,6})^2 + (N{5,7}-N{n,7})^2 + (N{5,7}-N{n,7})^2)

    end
    man(n)=b
end

min(man)
m=min(man) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(man)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.


%Cosine Distance

cos=[]
for n = 1:rownum
    if (n~=5)
        Dist_o_1 = 1-(dot(N{5,2},N{n,2})/(N{5,2}*N{n,2}))
    end
    cos(n)=Dist_o_1
end   
min(cos)
m=min(cos) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(cos)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.


%%% ================================ %%
%Question 3

% reading csv file to a table
filedata3=readmatrix("Tetuan City power consumption.csv")
filedata3(:,1)=[]
filedata3
N=rescale(filedata3)     %Rescale( filedata3 ) scales the entries of an array to the interval [0,1]

%Eucladian Distance

[rownum, ncolnum]=size(N);
rownum

euc=[]
for n = 1 : rownum        % eucalidan distance loop with each rows
    if (n~=5)             %except with it self (row 5)
        a=norm(N{5,2:8}-N{n,2:8})

    end
    euc(n)=a
end
min(euc) %find the nearest neighbour
m=min(euc) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(euc)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.


%Manhattan Distance
man=[]
for n = 1:rownum

    if (n~=5)
       b= sqrt((N{5,2}-N{n,2})^2 + (N{5,3}-N{n,3})^2+ (N{5,4}-N{n,4})^2 + (N{5,5}-N{n,5})^2+ (N{5,6}-N{n,6})^2 + (N{5,6}-N{n,6})^2 + (N{5,7}-N{n,7})^2 + (N{5,7}-N{n,7})^2)

    end
    man(n)=b
end

min(man)
m=min(man) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(man)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.

%Cosine Distance

cos=[]
for n = 1:rownum
    if (n~=5)
        Dist_o_1 = 1-(dot(N{5,2},N{n,2})/(N{5,2}*N{n,2}))
    end
    cos(n)=Dist_o_1
end   
min(cos)
m=min(cos) %find the nearest neighbour, %Minimum distance
[minvalue, index] = min(cos)          % find the shortest distance value 
index;     % give the row of the shortest distance value , %Positions of min distance, row of min.


%%% ================================ %%
%Question 4
%filedata4=readmatrix("Tetuan City power consumption.csv")%
%filedata4=readtable("Tetuan City power consumption.csv")
%K_m=readtable('Tetuan City power consumption.csv','ReadVariableNames',0);

%convert into daily 
m_1=readtimetable('power consumption.csv', 'VariableNamingRule','preserve');
TT = retime(m_1,'daily','sum');
TT

x = readtable ("power consumption.csv", 'VariableNamingRule','preserve');
sz=size(x); %Dimensions of power consumption data.
interval=10; %Time interval between two measurements.
minsinaday=24*60; %Minutes in a day.
dlta=minsinaday/interval; %Number of samples (data points) in collected during a day.
numdays=sz(1)/dlta; %Total number of days for which we have collected data.

dlta
numdays


subplot(2,2,1)
kmeans(K_m.Var2,3)






%%% ================================ %%
%Question 5


file1=load('Iris.txt')
[row,col]=size(file1)

F1=file1(1:40,2:col)  %first 40 cases from category 1
F2=file1(51:90,2:col) %first 40 cases from category 2
F3=file1(101:140,2:col) %first 40 cases from category 3

F = [F1;F2;F3]  %combining first 40 cases of all categories

G1=file1(41:50,2:col);  %remaining 10 cases from category 1
G2=file1(91:100,2:col); %remaining 10 cases from category 2
G3=file1(141:150,2:col); %remaining 10 cases from category 3
G=[G1;G2;G3]  %combining remaining 10 cases of all categories

length(G)
[row1,col1] = size(F)


[indices C] = kmeans(F, 3)

C_first=C(1,:)
C_second=C(2,:)
C_third=C(3,:)

classif_vec=zeros(1,30); %make a vector of 30 length to classify remaining ten casses of each group
for i=1:5
    for j=1:30
        d1=norm(C(1,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, first group with the jth row of remaing 10 caseses combine matrix
        d3=norm(C(2,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, second group with the jth row of remaing 10 caseses combine matrix
        d2=norm(C(3,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, thrid row with the jth row of remaing 10 caseses combine matrix
        d=[d1 d2 d3];
        [minvalue, index] = min(d)          % find the shortest distance value 
        classif_vec(j) = index;     % give the index vaue of the shortest distance value as the classification.
    end
end
classif_vec



%%% ================================ %%
%Question 6


file1=load('Iris.txt')
[row,col]=size(file1)
correlation=corrcoef(file1)
%max correlation value is found to be  0.9628, between column 4 and 5
red_dim=zeros(row,2);
red_dim(:,1)=mean(file1(:,4)) %taking mean of column 4 and adding into values of new feature
red_dim(:,2)=mean(file1(:,5))
red_dim

for i=1:row

    file1(i,4)=(file1(i,4)+file1(i,5))/2; %new feature colum is mean of two columns
end

file1(:,5)=[]
[row,col]=size(file1)
file1

F1=file1(1:40,2:col)  %first 40 cases from category 1, %not considering the first column which is running number cases
F2=file1(51:90,2:col) %first 40 cases from category 2, %not considering the first column which is running number cases
F3=file1(101:140,2:col) %first 40 cases from category 3, %not considering the first column which is running number cases

F = [F1;F2;F3]  %combining first 40 cases of all categories

G1=file1(41:50,2:col);  %remaining 10 cases from category 1
G2=file1(91:100,2:col); %remaining 10 cases from category 2
G3=file1(141:150,2:col); %remaining 10 cases from category 3
G=[G1;G2;G3]  %combining remaining 10 cases of all categories

length(G)
[row1,col1] = size(F)


[indices C] = kmeans(F, 3)



classif_vec=zeros(1,30); %make a vector of 30 length to classify remaining ten casses of each group
for i=1:4    
    for j=1:30
        d1=norm(C(1,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, first group with the jth row of remaing 10 caseses combine matrix
        d3=norm(C(2,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, second group with the jth row of remaing 10 caseses combine matrix
        d2=norm(C(3,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, thrid row with the jth row of remaing 10 caseses combine matrix
        d=[d1 d2 d3];
        [minvalue, index] = min(d)          % find the shortest distance value 
        classif_vec(j) = index;     % give the index vaue of the shortest distance value as the classification.
    end
end
classif_vec


%%% ================================ %%
%Question 7


%%% ================================ %%
%Question 7

%those 2 variables having least correlation, make a new feature and max value between both column
%will be considered as the value of new feature columns
file1=load('Iris.txt')
[row,col]=size(file1)
correlation=corrcoef(file1)
%min correlation value is found to be  -0.4205, between column 3 and 4

for i=1:row

    file1(i,3)=max([file1(i,3) file1(i,4)]); %new feature colum contains max value between column 3 and 4
end

file1(:,4)=[]
[row,col]=size(file1)
file1

F1=file1(1:40,2:col)  %first 40 cases from category 1, %not considering the first column which is running number cases
F2=file1(51:90,2:col) %first 40 cases from category 2, %not considering the first column which is running number cases
F3=file1(101:140,2:col) %first 40 cases from category 3, %not considering the first column which is running number cases

F = [F1;F2;F3]  %combining first 40 cases of all categories

G1=file1(41:50,2:col);  %remaining 10 cases from category 1
G2=file1(91:100,2:col); %remaining 10 cases from category 2
G3=file1(141:150,2:col); %remaining 10 cases from category 3
G=[G1;G2;G3]  %combining remaining 10 cases of all categories

length(G)
[row1,col1] = size(F)


[indices C] = kmeans(F, 3)



classif_vec=zeros(1,30); %make a vector of 30 length to classify remaining ten casses of each group
for i=1:4    
    for j=1:30
        d1=norm(C(1,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, first group with the jth row of remaing 10 caseses combine matrix
        d3=norm(C(2,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, second group with the jth row of remaing 10 caseses combine matrix
        d2=norm(C(3,:)-G(j,:));   %taking distance of K means clusters  resulted matrix, thrid row with the jth row of remaing 10 caseses combine matrix
        d=[d1 d2 d3];
        [minvalue, index] = min(d)          % find the shortest distance value 
        classif_vec(j) = index;     % give the index vaue of the shortest distance value as the classification.
    end
end
classif_vec
